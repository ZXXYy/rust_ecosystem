import sys
import os
import glob
import pandas as pd
import json
import click
sys.path.append('/home/xiaoyez/rust_vulnerabilities/utils')
import database as db
from database import write_database
from utils import get_full_project_name

ordered_columns = ['cve_id', 'hash', "path", "name", "span_start", "span_end", "unsafety"]
ordered_columns_block = ['cve_id', 'hash', 'fn_id', 'path', "span_start", "span_end", "unsafety"]
ordered_columns_num = ['cve_id', 'hash', 'safe_func', 'unsafe_func', 'unsafe_block']
compiler_result = "/home/xiaoyez/rust_vulnerabilities/compiler_result_v2"

def read_json_file(f):
    jsonList = []
    num_unsafe = 0
    num_safe = 0
    with open(f) as file:  
        jsonObj = ""  
        lines = file.readlines()
        num_unsafe = int(lines[1].split(': ')[1])
        num_safe = int(lines[0].split(': ')[1])
        for line in lines:
            if line[0] == "#":
                continue
            elif line!="}\n":
                jsonObj += line
            else:
                jsonObj += line
                jsonDict = json.loads(jsonObj)
                jsonList.append(jsonDict)
                jsonObj = ""
    return jsonList, num_safe, num_unsafe

def read_json_list_file(f):
    jsonList = []
    num_unsafe = 0
    with open(f) as file:  
        jsonObj = ""  
        lines = file.readlines()
        num_unsafe = int(lines[1].split(': ')[1])
        for line in lines:
            if line[0] == "#":
                continue
            elif line!="]\n":
                jsonObj += line
            else:
                jsonObj += line
                jsonDict = json.loads(jsonObj)
                if len(jsonDict)>0:
                    jsonList.extend(jsonDict)
                jsonObj = ""
    return jsonList, num_unsafe

def format_functions(f, cve_id, commit_hash):
    jsonList, num_safe, num_unsafe = read_json_file(f)
    df = pd.DataFrame.from_records(jsonList)
    df = df[df.apply(lambda x: False if "/.cargo/" in x.header_span or "/rustc/" in x.header_span else True, axis=1) ]
    df = df[df.apply(lambda x: True if ".rs" in x.header_span else False, axis=1) ]
    # remove #[derive()] functions auto-generated by compilers
    df = df[df.apply(lambda x: False if x.header_span == x.body_span else True, axis=1) ]

    if df.empty:
        return df,0, 0
    df['span_start'] = df.apply(lambda x: x.header_span.split(': ')[0].split('rs:')[1], axis=1)
    df['span_end'] = df.apply(lambda x:  x.body_span.split(': ')[1], axis=1)
    df['path'] = df.apply(lambda x: x.header_span.split(':')[0], axis=1)
    df["cve_id"] = cve_id
    df["hash"] = commit_hash
    df = df[ordered_columns]
    num_safe = len(df[df['unsafety']==False])
    num_unsafe = len(df[df['unsafety']==True])
    return df,num_safe, num_unsafe

def format_blocks(f, cve_id, commit_hash):
    jsonList, num_unsafe = read_json_list_file(f)
    df = pd.DataFrame.from_records(jsonList)
    df = df[df.apply(lambda x: False if "/.cargo/" in x.block_span or "/rustc/" in x.block_span else True, axis=1) ]
    df = df[df.apply(lambda x: True if ".rs" in x.block_span else False, axis=1) ]
    if df.empty:
        return df, 0
    df['span_start'] = df.apply(lambda x: x.block_span.split(': ')[0].split('rs:')[1], axis=1)
    df['span_end'] = df.apply(lambda x:  x.block_span.split(': ')[1], axis=1)
    df['path'] = df.apply(lambda x: x.block_span.split(':')[0], axis=1)
    df["hash"] = commit_hash
    df["cve_id"] = cve_id
    df = df[ordered_columns_block]
    num_unsafe = len(df)
    # print(df)
    return df, num_unsafe

def format_traits(f, package, cve_id, commit_hash):
    jsonList = read_json_file(f)
    df = pd.DataFrame.from_records(jsonList)
    if df.empty:
        return df
    df['fn_id'] = df['name'].apply(lambda x : hash(x+cve_id) & sys.maxsize)
    def get_loc(x):
        start = x.find("line \"")+6
        return x[start:-1]
    df['span'] = df['loc'].apply(lambda x: get_loc(x))
    del df["loc"]
    del df["safe"]
    df["package"] = package
    df["cve_id"] = cve_id
    df["hash"] = commit_hash
    df["unsafety"] = True
    df = df[ordered_columns]
    return df

def drop_tables():
    # drop all unsafe related tables
    mycursor = db.conn.cursor()
    mycursor.execute("DROP TABLE IF EXISTS unsafe_block;")
    mycursor.execute("DROP TABLE IF EXISTS unsafe_block_fix;")
    mycursor.execute("DROP TABLE IF EXISTS function;")
    mycursor.execute("DROP TABLE IF EXISTS function_fix;")
    mycursor.execute("DROP TABLE IF EXISTS total_safe_unsafe;")

def format_compile(analysis_dir, cve_id, hash):
    total_fn_safe = 0
    total_fn_unsafe = 0
    total_block_unsafe = 0
    df_func = pd.DataFrame()
    df_block = pd.DataFrame()

    for compile_unit in os.listdir(analysis_dir):
        obs_path = analysis_dir + compile_unit
        # print(obs_path)
        if os.path.isdir(obs_path):
            f_funcs = glob.glob(obs_path+r'/01_functions*')
            f_blocks = glob.glob(obs_path+r'/02_blocks_in_function*')
            f_trait = glob.glob(obs_path+r'/03_unsafe_traits_impls*')
            for f_func in f_funcs:
                df, num_safe, num_unsafe = format_functions(f_func, cve_id, hash)
                if not df.empty:
                    df_func = df_func.append(df)
                total_fn_safe += num_safe
                total_fn_unsafe += num_unsafe
            for f_block in f_blocks:
                df, num_unsafe = format_blocks(f_block, cve_id, hash)
                if not df.empty:
                    df_block = df_block.append(df)
                total_block_unsafe += num_unsafe
    return df_func, df_block, total_fn_safe, total_fn_unsafe, total_block_unsafe



@click.command()
# @click.argument("inpath", type=click.STRING) # "/home/xiaoyez/rust_vulnerabilities/compiler_result_v2"
@click.argument("commitfile", type=click.STRING) # /home/xiaoyez/rust_vulnerabilities/data_collection/data/fix_commits_final.csv
def main(commitfile):
    drop_tables()

    df_fixes = pd.read_csv(commitfile)
    df_fixes.drop_duplicates(subset =['hash', 'repo_url'], keep = 'first', inplace = True)
    df_safe_cnt = pd.DataFrame()
    compile_failed = 0
    for index, row in df_fixes.iterrows():
        repo_url = row["repo_url"]
        cve_id = row["cve_id"]
        hash = row["hash"]
        full_project_name = get_full_project_name(repo_url)
        
        analysis_dir = f"{compiler_result}/{full_project_name}/{cve_id}/{hash}/"
        print(analysis_dir)
        if os.path.exists(analysis_dir):
            df_func, df_block, total_fn_safe, total_fn_unsafe, total_block_unsafe = format_compile(analysis_dir, cve_id, hash)
            write_database("function", df_func)
            write_database("unsafe_block", df_block)
            df_safe_cnt = df_safe_cnt.append({"cve_id": cve_id, 
                            "hash":hash, 
                            "safe_func":total_fn_safe, 
                            "unsafe_func":total_fn_unsafe, 
                            "unsafe_block":total_block_unsafe}, ignore_index=True)
        else:
            compile_failed += 1

        analysis_dir = f"{compiler_result}/{full_project_name}/{cve_id}_fix/{hash}/"
        print(analysis_dir)
        if os.path.exists(analysis_dir):
            df_func, df_block, total_fn_safe, total_fn_unsafe, total_block_unsafe = format_compile(analysis_dir, cve_id, hash)
            write_database("unsafe_block_fix", df_block)
            write_database("function_fix", df_func)
        else:
            compile_failed += 1
        
    df_safe_cnt = df_safe_cnt[ordered_columns_num]
    write_database("total_safe_unsafe",df_safe_cnt)
    
if __name__ == '__main__':
    main()